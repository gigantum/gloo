// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/plugins/dlp/dlp.proto

package dlp

import (
	bytes "bytes"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Action_ActionType int32

const (
	Action_CUSTOM               Action_ActionType = 0
	Action_SSN                  Action_ActionType = 1
	Action_MASTERCARD           Action_ActionType = 2
	Action_VISA                 Action_ActionType = 3
	Action_AMEX                 Action_ActionType = 4
	Action_DISCOVER             Action_ActionType = 5
	Action_JCB                  Action_ActionType = 6
	Action_DINERS_CLUB          Action_ActionType = 7
	Action_CREDIT_CARD_TRACKERS Action_ActionType = 8
	Action_ALL_CREDIT_CARDS     Action_ActionType = 9
)

var Action_ActionType_name = map[int32]string{
	0: "CUSTOM",
	1: "SSN",
	2: "MASTERCARD",
	3: "VISA",
	4: "AMEX",
	5: "DISCOVER",
	6: "JCB",
	7: "DINERS_CLUB",
	8: "CREDIT_CARD_TRACKERS",
	9: "ALL_CREDIT_CARDS",
}

var Action_ActionType_value = map[string]int32{
	"CUSTOM":               0,
	"SSN":                  1,
	"MASTERCARD":           2,
	"VISA":                 3,
	"AMEX":                 4,
	"DISCOVER":             5,
	"JCB":                  6,
	"DINERS_CLUB":          7,
	"CREDIT_CARD_TRACKERS": 8,
	"ALL_CREDIT_CARDS":     9,
}

func (x Action_ActionType) String() string {
	return proto.EnumName(Action_ActionType_name, int32(x))
}

func (Action_ActionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_34ec831aa7b23456, []int{2, 0}
}

type Config struct {
	Actions              []*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Config) Reset()         { *m = Config{} }
func (m *Config) String() string { return proto.CompactTextString(m) }
func (*Config) ProtoMessage()    {}
func (*Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ec831aa7b23456, []int{0}
}
func (m *Config) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Config.Unmarshal(m, b)
}
func (m *Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Config.Marshal(b, m, deterministic)
}
func (m *Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Config.Merge(m, src)
}
func (m *Config) XXX_Size() int {
	return xxx_messageInfo_Config.Size(m)
}
func (m *Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Config proto.InternalMessageInfo

func (m *Config) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

type FilterConfig struct {
	Actions              []*Action   `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	Matcher              *DlpMatcher `protobuf:"bytes,2,opt,name=matcher,proto3" json:"matcher,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *FilterConfig) Reset()         { *m = FilterConfig{} }
func (m *FilterConfig) String() string { return proto.CompactTextString(m) }
func (*FilterConfig) ProtoMessage()    {}
func (*FilterConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ec831aa7b23456, []int{1}
}
func (m *FilterConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FilterConfig.Unmarshal(m, b)
}
func (m *FilterConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FilterConfig.Marshal(b, m, deterministic)
}
func (m *FilterConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FilterConfig.Merge(m, src)
}
func (m *FilterConfig) XXX_Size() int {
	return xxx_messageInfo_FilterConfig.Size(m)
}
func (m *FilterConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FilterConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FilterConfig proto.InternalMessageInfo

func (m *FilterConfig) GetActions() []*Action {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *FilterConfig) GetMatcher() *DlpMatcher {
	if m != nil {
		return m.Matcher
	}
	return nil
}

type Action struct {
	ActionType           Action_ActionType `protobuf:"varint,1,opt,name=action_type,json=actionType,proto3,enum=dlp.plugins.gloo.solo.io.Action_ActionType" json:"action_type,omitempty"`
	CustomAction         *CustomAction     `protobuf:"bytes,2,opt,name=custom_action,json=customAction,proto3" json:"custom_action,omitempty"`
	Shadow               bool              `protobuf:"varint,3,opt,name=shadow,proto3" json:"shadow,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Action) Reset()         { *m = Action{} }
func (m *Action) String() string { return proto.CompactTextString(m) }
func (*Action) ProtoMessage()    {}
func (*Action) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ec831aa7b23456, []int{2}
}
func (m *Action) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Action.Unmarshal(m, b)
}
func (m *Action) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Action.Marshal(b, m, deterministic)
}
func (m *Action) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Action.Merge(m, src)
}
func (m *Action) XXX_Size() int {
	return xxx_messageInfo_Action.Size(m)
}
func (m *Action) XXX_DiscardUnknown() {
	xxx_messageInfo_Action.DiscardUnknown(m)
}

var xxx_messageInfo_Action proto.InternalMessageInfo

func (m *Action) GetActionType() Action_ActionType {
	if m != nil {
		return m.ActionType
	}
	return Action_CUSTOM
}

func (m *Action) GetCustomAction() *CustomAction {
	if m != nil {
		return m.CustomAction
	}
	return nil
}

func (m *Action) GetShadow() bool {
	if m != nil {
		return m.Shadow
	}
	return false
}

type CustomAction struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Regex                string   `protobuf:"bytes,2,opt,name=regex,proto3" json:"regex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomAction) Reset()         { *m = CustomAction{} }
func (m *CustomAction) String() string { return proto.CompactTextString(m) }
func (*CustomAction) ProtoMessage()    {}
func (*CustomAction) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ec831aa7b23456, []int{3}
}
func (m *CustomAction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomAction.Unmarshal(m, b)
}
func (m *CustomAction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomAction.Marshal(b, m, deterministic)
}
func (m *CustomAction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomAction.Merge(m, src)
}
func (m *CustomAction) XXX_Size() int {
	return xxx_messageInfo_CustomAction.Size(m)
}
func (m *CustomAction) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomAction.DiscardUnknown(m)
}

var xxx_messageInfo_CustomAction proto.InternalMessageInfo

func (m *CustomAction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustomAction) GetRegex() string {
	if m != nil {
		return m.Regex
	}
	return ""
}

type DlpMatcher struct {
	PathMatchers         []*PathMatcher   `protobuf:"bytes,1,rep,name=path_matchers,json=pathMatchers,proto3" json:"path_matchers,omitempty"`
	HeaderMatchers       []*HeaderMatcher `protobuf:"bytes,2,rep,name=header_matchers,json=headerMatchers,proto3" json:"header_matchers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *DlpMatcher) Reset()         { *m = DlpMatcher{} }
func (m *DlpMatcher) String() string { return proto.CompactTextString(m) }
func (*DlpMatcher) ProtoMessage()    {}
func (*DlpMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ec831aa7b23456, []int{4}
}
func (m *DlpMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DlpMatcher.Unmarshal(m, b)
}
func (m *DlpMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DlpMatcher.Marshal(b, m, deterministic)
}
func (m *DlpMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DlpMatcher.Merge(m, src)
}
func (m *DlpMatcher) XXX_Size() int {
	return xxx_messageInfo_DlpMatcher.Size(m)
}
func (m *DlpMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_DlpMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_DlpMatcher proto.InternalMessageInfo

func (m *DlpMatcher) GetPathMatchers() []*PathMatcher {
	if m != nil {
		return m.PathMatchers
	}
	return nil
}

func (m *DlpMatcher) GetHeaderMatchers() []*HeaderMatcher {
	if m != nil {
		return m.HeaderMatchers
	}
	return nil
}

// standalone path matcher to be used in repeated use case
// functions same as the above one
type PathMatcher struct {
	// Types that are valid to be assigned to PathSpecifier:
	//	*PathMatcher_Prefix
	//	*PathMatcher_Exact
	//	*PathMatcher_Regex
	PathSpecifier        isPathMatcher_PathSpecifier `protobuf_oneof:"path_specifier"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PathMatcher) Reset()         { *m = PathMatcher{} }
func (m *PathMatcher) String() string { return proto.CompactTextString(m) }
func (*PathMatcher) ProtoMessage()    {}
func (*PathMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ec831aa7b23456, []int{5}
}
func (m *PathMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathMatcher.Unmarshal(m, b)
}
func (m *PathMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathMatcher.Marshal(b, m, deterministic)
}
func (m *PathMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathMatcher.Merge(m, src)
}
func (m *PathMatcher) XXX_Size() int {
	return xxx_messageInfo_PathMatcher.Size(m)
}
func (m *PathMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_PathMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_PathMatcher proto.InternalMessageInfo

type isPathMatcher_PathSpecifier interface {
	isPathMatcher_PathSpecifier()
	Equal(interface{}) bool
}

type PathMatcher_Prefix struct {
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3,oneof" json:"prefix,omitempty"`
}
type PathMatcher_Exact struct {
	Exact string `protobuf:"bytes,2,opt,name=exact,proto3,oneof" json:"exact,omitempty"`
}
type PathMatcher_Regex struct {
	Regex string `protobuf:"bytes,3,opt,name=regex,proto3,oneof" json:"regex,omitempty"`
}

func (*PathMatcher_Prefix) isPathMatcher_PathSpecifier() {}
func (*PathMatcher_Exact) isPathMatcher_PathSpecifier()  {}
func (*PathMatcher_Regex) isPathMatcher_PathSpecifier()  {}

func (m *PathMatcher) GetPathSpecifier() isPathMatcher_PathSpecifier {
	if m != nil {
		return m.PathSpecifier
	}
	return nil
}

func (m *PathMatcher) GetPrefix() string {
	if x, ok := m.GetPathSpecifier().(*PathMatcher_Prefix); ok {
		return x.Prefix
	}
	return ""
}

func (m *PathMatcher) GetExact() string {
	if x, ok := m.GetPathSpecifier().(*PathMatcher_Exact); ok {
		return x.Exact
	}
	return ""
}

func (m *PathMatcher) GetRegex() string {
	if x, ok := m.GetPathSpecifier().(*PathMatcher_Regex); ok {
		return x.Regex
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PathMatcher) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PathMatcher_Prefix)(nil),
		(*PathMatcher_Exact)(nil),
		(*PathMatcher_Regex)(nil),
	}
}

//   Internally, Gloo always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host*
//   header. Thus, if attempting to match on *Host*, match on *:authority* instead.
//
//   In the absence of any header match specifier, match will default to `present_match`
//   i.e, a request that has the `name` header will match, regardless of the header's
//   value.
type HeaderMatcher struct {
	// Specifies the name of the header in the request.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Specifies the value of the header. If the value is absent a request that
	// has the name header will match, regardless of the header’s value.
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// Specifies whether the header value should be treated as regex or not.
	Regex                bool     `protobuf:"varint,3,opt,name=regex,proto3" json:"regex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HeaderMatcher) Reset()         { *m = HeaderMatcher{} }
func (m *HeaderMatcher) String() string { return proto.CompactTextString(m) }
func (*HeaderMatcher) ProtoMessage()    {}
func (*HeaderMatcher) Descriptor() ([]byte, []int) {
	return fileDescriptor_34ec831aa7b23456, []int{6}
}
func (m *HeaderMatcher) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HeaderMatcher.Unmarshal(m, b)
}
func (m *HeaderMatcher) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HeaderMatcher.Marshal(b, m, deterministic)
}
func (m *HeaderMatcher) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HeaderMatcher.Merge(m, src)
}
func (m *HeaderMatcher) XXX_Size() int {
	return xxx_messageInfo_HeaderMatcher.Size(m)
}
func (m *HeaderMatcher) XXX_DiscardUnknown() {
	xxx_messageInfo_HeaderMatcher.DiscardUnknown(m)
}

var xxx_messageInfo_HeaderMatcher proto.InternalMessageInfo

func (m *HeaderMatcher) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *HeaderMatcher) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *HeaderMatcher) GetRegex() bool {
	if m != nil {
		return m.Regex
	}
	return false
}

func init() {
	proto.RegisterEnum("dlp.plugins.gloo.solo.io.Action_ActionType", Action_ActionType_name, Action_ActionType_value)
	proto.RegisterType((*Config)(nil), "dlp.plugins.gloo.solo.io.Config")
	proto.RegisterType((*FilterConfig)(nil), "dlp.plugins.gloo.solo.io.FilterConfig")
	proto.RegisterType((*Action)(nil), "dlp.plugins.gloo.solo.io.Action")
	proto.RegisterType((*CustomAction)(nil), "dlp.plugins.gloo.solo.io.CustomAction")
	proto.RegisterType((*DlpMatcher)(nil), "dlp.plugins.gloo.solo.io.DlpMatcher")
	proto.RegisterType((*PathMatcher)(nil), "dlp.plugins.gloo.solo.io.PathMatcher")
	proto.RegisterType((*HeaderMatcher)(nil), "dlp.plugins.gloo.solo.io.HeaderMatcher")
}

func init() {
	proto.RegisterFile("github.com/solo-io/gloo/projects/gloo/api/v1/enterprise/plugins/dlp/dlp.proto", fileDescriptor_34ec831aa7b23456)
}

var fileDescriptor_34ec831aa7b23456 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xad, 0x93, 0xd6, 0x49, 0x6f, 0xd2, 0xd4, 0x1a, 0x45, 0x95, 0xf5, 0x2d, 0x3e, 0x45, 0x16,
	0x3f, 0x91, 0x10, 0xb6, 0x28, 0x1b, 0xc4, 0x02, 0xc9, 0x75, 0x02, 0x4d, 0x9b, 0xb4, 0xd5, 0x38,
	0xad, 0x10, 0x1b, 0xcb, 0x75, 0xa7, 0xf6, 0x80, 0x93, 0x19, 0xd9, 0x93, 0x92, 0xbe, 0x02, 0xef,
	0xc0, 0x1e, 0xf1, 0x4a, 0xec, 0x78, 0x12, 0xe4, 0x19, 0x9b, 0x84, 0x45, 0x00, 0x89, 0x85, 0xe5,
	0x7b, 0x66, 0xee, 0x39, 0x33, 0xf7, 0xdc, 0xd1, 0x85, 0x49, 0x4c, 0x45, 0xb2, 0xb8, 0xb6, 0x23,
	0x36, 0x73, 0x72, 0x96, 0xb2, 0xa7, 0x94, 0x39, 0x71, 0xca, 0x98, 0xc3, 0x33, 0xf6, 0x9e, 0x44,
	0x22, 0x57, 0x28, 0xe4, 0xd4, 0xb9, 0x7b, 0xe6, 0x90, 0xb9, 0x20, 0x19, 0xcf, 0x68, 0x4e, 0x1c,
	0x9e, 0x2e, 0x62, 0x3a, 0xcf, 0x9d, 0x9b, 0x94, 0x17, 0x9f, 0xcd, 0x33, 0x26, 0x18, 0x32, 0x65,
	0xa8, 0xb6, 0xec, 0x82, 0x69, 0x17, 0xa2, 0x36, 0x65, 0xff, 0x75, 0x63, 0x16, 0x33, 0x99, 0xe4,
	0x14, 0x91, 0xca, 0xb7, 0x06, 0xa0, 0x7b, 0x6c, 0x7e, 0x4b, 0x63, 0xf4, 0x12, 0x1a, 0x61, 0x24,
	0x28, 0x9b, 0xe7, 0xa6, 0xd6, 0xab, 0xf7, 0x5b, 0x87, 0x3d, 0x7b, 0x93, 0x96, 0xed, 0xca, 0x44,
	0x5c, 0x11, 0xac, 0x4f, 0x1a, 0xb4, 0x5f, 0xd3, 0x54, 0x90, 0xec, 0xdf, 0xc5, 0xd0, 0x2b, 0x68,
	0xcc, 0x42, 0x11, 0x25, 0x24, 0x33, 0x6b, 0x3d, 0xad, 0xdf, 0x3a, 0x7c, 0xb0, 0x99, 0x3b, 0x48,
	0xf9, 0x44, 0xe5, 0xe2, 0x8a, 0x64, 0x7d, 0xab, 0x81, 0xae, 0x34, 0xd1, 0x18, 0x5a, 0x4a, 0x35,
	0x10, 0xf7, 0x9c, 0x98, 0x5a, 0x4f, 0xeb, 0x77, 0x0e, 0x9f, 0xfc, 0xe9, 0x2a, 0xe5, 0x6f, 0x7a,
	0xcf, 0x09, 0x86, 0xf0, 0x67, 0x8c, 0x4e, 0x61, 0x2f, 0x5a, 0xe4, 0x82, 0xcd, 0x02, 0xb5, 0x58,
	0x5e, 0xef, 0xd1, 0x66, 0x3d, 0x4f, 0xa6, 0x97, 0x05, 0xb6, 0xa3, 0x35, 0x84, 0x0e, 0x40, 0xcf,
	0x93, 0xf0, 0x86, 0x7d, 0x34, 0xeb, 0x3d, 0xad, 0xdf, 0xc4, 0x25, 0xb2, 0x3e, 0x6b, 0x00, 0xab,
	0xf3, 0x11, 0x80, 0xee, 0x5d, 0xfa, 0xd3, 0xf3, 0x89, 0xb1, 0x85, 0x1a, 0x50, 0xf7, 0xfd, 0x33,
	0x43, 0x43, 0x1d, 0x80, 0x89, 0xeb, 0x4f, 0x87, 0xd8, 0x73, 0xf1, 0xc0, 0xa8, 0xa1, 0x26, 0x6c,
	0x5f, 0x8d, 0x7c, 0xd7, 0xa8, 0x17, 0x91, 0x3b, 0x19, 0xbe, 0x35, 0xb6, 0x51, 0x1b, 0x9a, 0x83,
	0x91, 0xef, 0x9d, 0x5f, 0x0d, 0xb1, 0xb1, 0x53, 0x50, 0x4f, 0xbc, 0x23, 0x43, 0x47, 0xfb, 0xd0,
	0x1a, 0x8c, 0xce, 0x86, 0xd8, 0x0f, 0xbc, 0xf1, 0xe5, 0x91, 0xd1, 0x40, 0x26, 0x74, 0x3d, 0x3c,
	0x1c, 0x8c, 0xa6, 0x41, 0x21, 0x16, 0x4c, 0xb1, 0xeb, 0x9d, 0x0e, 0xb1, 0x6f, 0x34, 0x51, 0x17,
	0x0c, 0x77, 0x3c, 0x0e, 0xd6, 0x76, 0x7d, 0x63, 0xd7, 0x7a, 0x01, 0xed, 0xf5, 0xaa, 0x10, 0x82,
	0xed, 0x79, 0x38, 0x53, 0xde, 0xee, 0x62, 0x19, 0xa3, 0x2e, 0xec, 0x64, 0x24, 0x26, 0x4b, 0x69,
	0xd0, 0x2e, 0x56, 0xc0, 0xfa, 0xaa, 0x01, 0xac, 0xfa, 0x85, 0x4e, 0x60, 0x8f, 0x87, 0x22, 0x09,
	0xca, 0xb6, 0x55, 0x0f, 0xe5, 0xe1, 0x66, 0x37, 0x2f, 0x42, 0x91, 0x54, 0xdd, 0x6e, 0xf3, 0x15,
	0xc8, 0xd1, 0x05, 0xec, 0x27, 0x24, 0xbc, 0x21, 0xd9, 0x4a, 0xad, 0x26, 0xd5, 0x1e, 0x6f, 0x56,
	0x3b, 0x96, 0x84, 0x4a, 0xaf, 0x93, 0xac, 0xc3, 0xdc, 0xa2, 0xd0, 0x5a, 0x3b, 0x0e, 0x99, 0xa0,
	0xf3, 0x8c, 0xdc, 0xd2, 0xa5, 0xaa, 0xf3, 0x78, 0x0b, 0x97, 0x18, 0x1d, 0xc0, 0x0e, 0x59, 0x86,
	0x91, 0x50, 0xb5, 0x1e, 0x6f, 0x61, 0x05, 0x8b, 0x75, 0xe5, 0x41, 0xbd, 0x5a, 0x97, 0xf0, 0xc8,
	0x80, 0x8e, 0x2c, 0x3b, 0xe7, 0x24, 0xa2, 0xb7, 0x94, 0x64, 0xd6, 0x39, 0xec, 0xfd, 0x72, 0x97,
	0x4d, 0x96, 0xde, 0x85, 0xe9, 0x82, 0x54, 0x96, 0x4a, 0xb0, 0x32, 0x5a, 0xbd, 0xa1, 0xf2, 0x88,
	0xc9, 0x97, 0xef, 0xff, 0x6b, 0xef, 0xde, 0xfc, 0xdd, 0x60, 0xe1, 0x1f, 0xe2, 0xdf, 0x0f, 0x97,
	0x6b, 0x5d, 0x4e, 0x8a, 0xe7, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x42, 0x82, 0xa3, 0x5e, 0xaa,
	0x04, 0x00, 0x00,
}

func (this *Config) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Config)
	if !ok {
		that2, ok := that.(Config)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Actions) != len(that1.Actions) {
		return false
	}
	for i := range this.Actions {
		if !this.Actions[i].Equal(that1.Actions[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *FilterConfig) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FilterConfig)
	if !ok {
		that2, ok := that.(FilterConfig)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Actions) != len(that1.Actions) {
		return false
	}
	for i := range this.Actions {
		if !this.Actions[i].Equal(that1.Actions[i]) {
			return false
		}
	}
	if !this.Matcher.Equal(that1.Matcher) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Action) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Action)
	if !ok {
		that2, ok := that.(Action)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ActionType != that1.ActionType {
		return false
	}
	if !this.CustomAction.Equal(that1.CustomAction) {
		return false
	}
	if this.Shadow != that1.Shadow {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CustomAction) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CustomAction)
	if !ok {
		that2, ok := that.(CustomAction)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DlpMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DlpMatcher)
	if !ok {
		that2, ok := that.(DlpMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.PathMatchers) != len(that1.PathMatchers) {
		return false
	}
	for i := range this.PathMatchers {
		if !this.PathMatchers[i].Equal(that1.PathMatchers[i]) {
			return false
		}
	}
	if len(this.HeaderMatchers) != len(that1.HeaderMatchers) {
		return false
	}
	for i := range this.HeaderMatchers {
		if !this.HeaderMatchers[i].Equal(that1.HeaderMatchers[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PathMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PathMatcher)
	if !ok {
		that2, ok := that.(PathMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.PathSpecifier == nil {
		if this.PathSpecifier != nil {
			return false
		}
	} else if this.PathSpecifier == nil {
		return false
	} else if !this.PathSpecifier.Equal(that1.PathSpecifier) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PathMatcher_Prefix) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PathMatcher_Prefix)
	if !ok {
		that2, ok := that.(PathMatcher_Prefix)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Prefix != that1.Prefix {
		return false
	}
	return true
}
func (this *PathMatcher_Exact) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PathMatcher_Exact)
	if !ok {
		that2, ok := that.(PathMatcher_Exact)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Exact != that1.Exact {
		return false
	}
	return true
}
func (this *PathMatcher_Regex) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PathMatcher_Regex)
	if !ok {
		that2, ok := that.(PathMatcher_Regex)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	return true
}
func (this *HeaderMatcher) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HeaderMatcher)
	if !ok {
		that2, ok := that.(HeaderMatcher)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Regex != that1.Regex {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
